This is my first edit for Git Tutorials
Hi is my first edits for Git Tutorials
<h1>Hi First Text</h1>
error.log is registered
Other files are also registered too.
skipping staging area now
testing -a flag in git commit by writing git commit -a first.txt -m follwed by commit message
git
git
.gitignore:*.logs
.gitignore:*dir
.gitignore:dir/
.gitignore:error.log
readme.md:# To startr tracking initials yr directory/folder by git by below command (this will create a hidden folder names as .git We can see it by command   --> ls -a )
readme.md:# and now put names of the files which u didn't want to track in .gitignore so whwnver u add a name of file in .gitignore and suppose made a change in files which is listed in .gitignore then any changes done to those files will be ignored, but yaeh only .gitignore will be modifed as git do tracks .gitignore directory so we have to staged that and commit it.
readme.md:examples of names/files in .gitignore  (all files names with extension .logs will be ignored it can be in any subdirs too still it will be ignored, error.log will be ignored, all files inside dir directory( this dir directory can be presnt in any subdirectory of root foler of our project but still it will be ignored by git ) will be ignored.)
readme.md:Note: : the /dir/ directory states that to ignore the directory named as dir in root folder of our project.
readme.md:### PS:: git by default ignores the blank directory.
readme.md:/dir/
readme.md:dir/    
readme.md:## Git diff  : Calculates the diff between unmodified files in staging area and modified files in working directory.(ex:: i staged the file say readme.md after that i modified the same file then readme.md will be in both -> Staging area ( Changes to be Committed ) as well as in -> Changes not staged for Commit. 
readme.md:# Skipping the staging area (so yeah we can commit the tracked modfied file directly with adding into staging area explicitly by single command)
readme.md:	git commit -a -m "skiiping satging area and commiting directly"
readme.md:PS:: suppose u have created a new file by say touch new_file.txt then as it will be untracked so using above command i.e git commit -a -m "any suitable commit message here"  will not commit the untracked file this command will commit only tracked modiied file. for untracked u have to use command git add new_file.txt in order to make it tracked after that u can use above command to directly commit it skipping the habit of adding files to staging area explicitly. 
readme.md:# Note PS:: the 'git restore' compares working dir changes to its  nearest one i.e staging area or .git repo if ur file is not in staging area as it not yet staged then on restoring it will checkout to previous commit changes else if its staged then only non staged changes of that  file will be removed leaving behind staged chanegea
readme.md:# To startr tracking initials yr directory/folder by git by below command (this will create a hidden folder names as .git We can see it by command   --> ls -a )
readme.md:# and now put names of the files which u didn't want to track in .gitignore so whwnver u add a name of file in .gitignore and suppose made a change in files which is listed in .gitignore then any changes done to those files will be ignored, but yaeh only .gitignore will be modifed as git do tracks .gitignore directory so we have to staged that and commit it.
readme.md:examples of names/files in .gitignore  (all files names with extension .logs will be ignored it can be in any subdirs too still it will be ignored, error.log will be ignored, all files inside dir directory( this dir directory can be presnt in any subdirectory of root foler of our project but still it will be ignored by git ) will be ignored.)
readme.md:Note: : the /dir/ directory states that to ignore the directory named as dir in root folder of our project.
readme.md:### PS:: git by default ignores the blank directory.
readme.md:/dir/
readme.md:dir/    
readme.md:## Git diff  : Calculates the diff between unmodified files in staging area and modified files in working directory.(ex:: i staged the file say readme.md after that i modified the same file then readme.md will be in both -> Staging area ( Changes to be Committed ) as well as in -> Changes not staged for Commit. 
readme.md:# Skipping the staging area (so yeah we can commit the tracked modfied file directly with adding into staging area explicitly by single command)
readme.md:	git commit -a -m "skiiping satging area and commiting directly"
readme.md:PS:: suppose u have created a new file by say touch new_file.txt then as it will be untracked so using above command i.e git commit -a -m "any suitable commit message here"  will not commit the untracked file this command will commit only tracked modiied file. for untracked u have to use command git add new_file.txt in order to make it tracked after that u can use above command to directly commit it skipping the habit of adding files to staging area explicitly. 
readme.md:# Note PS:: the 'git restore' compares working dir changes to its  nearest one i.e staging area or .git repo if ur file is not in staging area as it not yet staged then on restoring it will checkout to previous commit changes else if its staged then only non staged changes of that  file will be removed leaving behind staged chanegea
this edit arises from the mybugfix branch***** 
